Day-17
26/05/2025

#include <stdio.h>
#include <unistd.h>   	//for sleep()
#include <stdlib.h>    //for exit()

int main()
{
	printf("Program started\n");
	
	printf("Sleeping for 3 seconds\n");
	sleep(3);   //pause for 3 seconds
	
	printf("Exiting the program\n");
	exit(0); 	//clean exit indicating program terminated succesfully
	
}

Output:

[2021ict71@fedora ~]$ ./sleep
Program started
Sleeping for 3 seconds
Exiting the program
[2021ict71@fedora ~]$

---------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>	//for input/outputs like printf
#include <unistd.h>   	//for sleep(), fork()
#include <stdlib.h>  	//for exit()
#include <sys/wait.h>	// for wait()
#include <sys/types.h>	// for wait()

int main()
{
	pid_t pid;
	
	printf("Parent process started. PID: %d\n",getpid());

	pid=fork();
	if(pid < 0)
	{
		perror("Fork Failed!");
		exit(1);
	}
	
	if(pid == 0)
	{
		printf("Child process. PID: %d. sleeping for 2 seconds...\n",getpid());
		sleep(2);
		printf("Child process is exiting.\n");
		exit(0);
	}
	else
	{
		//parent process 
		int status;
		printf("Parent waiting child to finish..\n");
		wait(&status);
		if(WIFEXITED(status))
		{
			printf("Child exited with status: %d\n", WEXITSTATUS(status));
		}
		else
		{
			printf("Child did not exit normally.\n");
		}
		printf("Parent process ending.\n");

	}
}


Parent process started. PID: 10854
Parent waiting child to finish..
Child process. PID: 10855. sleeping for 2 seconds...
Child process is exiting.
Child exited with status: 0
Parent process ending.
[2021ict71@fedora ~]$

---------------------------------------------------------------------------------------------------------------------------------------------------

//Exercise 01:
//
//First Child: Slept for 1 second
//Second Child: Slept for 3 seconds
//Third Child: Both Children have finished

#include <stdio.h>		
#include <unistd.h>   	
#include <stdlib.h>  	
#include <sys/wait.h>

int main()
{
	printf("Parent child starting execution PID is: %d\n",getpid());
	
	int C1 = fork();
	
	if(C1==0)
	{
		printf("Child 1 starting execution PID is: %d, waiting for 2 seconds\n",getpid());
		sleep(2);
		printf("Child process 1 is exiting.\n");
		exit(0);
	}
	else
	{
		int C2 = fork();
		if(C2==0)
		{
			printf("Child 2 starting execution PID is: %d, waiting for 2 seconds\n",getpid());
			sleep(2);
			printf("Child process 2 is exiting.\n");
			exit(0);			
		}
		else
		{
			int status;
			printf("Parent waiting child to finish..\n");
			wait(&status);
			if(WIFEXITED(status))
			{
				printf("Children exited with status: %d\n", WEXITSTATUS(status));
			}
			else
			{
				printf("Child did not exit normally.\n");
			}
			
		}
		printf("Parent process ending.\n");
	}
}



[2021ict71@fedora ~]$ ./l
Parent child starting execution PID is: 13948
Parent waiting child to finish..
Child 1 starting execution PID is: 13949, waiting for 2 seconds
Child 2 starting execution PID is: 13950, waiting for 2 seconds
Child process 1 is exiting.
Child process 2 is exiting.
Child exited with status: 0
Parent process ending.

---------------------------------------------------------------------------------------------------------------------------------------------------
//Exercise 02:
//First Child: Sleeps for 2 seconds, exit with status 2
//Second Child: Sleeps for 1 second, exit with status 1
//Parent: waits twice, and prints which child (by PID or exit code)
//Finished first and second


#include <stdio.h>		
#include <unistd.h>   	
#include <stdlib.h>  	
#include <sys/wait.h>

int main()
{
    printf("Parent starting execution. PID: %d\n", getpid());

    int C1 = fork();
    
    if (C1 == 0)
    {
        printf("Child 1 starting execution. PID: %d, sleeping 2 seconds.\n", getpid());
        sleep(2);
        printf("Child 1 exiting.\n");
        exit(2);
    }
    else
    {
        int C2 = fork();
        if (C2 == 0)
        {
            printf("Child 2 starting execution. PID: %d, sleeping 1 second.\n", getpid());
            sleep(1);
            printf("Child 2 exiting.\n");
            exit(1);
        }
        else
        {
            int status;
            pid_t child_pid;

            child_pid = wait(&status);
            if (WIFEXITED(status))
            {
                printf("Parent: Child with PID %d exited with status %d\n", child_pid, WEXITSTATUS(status));
            }

            child_pid = wait(&status);
            if (WIFEXITED(status))
            {
                printf("Parent: Child with PID %d exited with status %d\n", child_pid, WEXITSTATUS(status));
            }

            printf("Parent process ending.\n");
        }
    }

    return 0;
}

Parent starting execution. PID: 1045
Child 1 starting execution. PID: 1046, sleeping 2 seconds.
Child 2 starting execution. PID: 1047, sleeping 1 second.
Child 2 exiting.
Parent: Child with PID 1047 exited with status 1
Child 1 exiting.
Parent: Child with PID 1046 exited with status 2
Parent process ending.



---------------------------------------------------------------------------------------------------------------------------------------------------

/*
Exercise 03
The parent creates a child process
The child creates a grandchild process
The grandchild sleep 2 second and exits with status 2
The child waits for the grandchild , print its exit status
then exits with status 55 

*/

#include <stdio.h>		
#include <unistd.h>   	
#include <stdlib.h>  	
#include <sys/wait.h>

int main()
{
    printf("Parent starting execution. PID: %d\n", getpid());

    int C1 = fork();
    
    if (C1 == 0)
    {
		gc = fork();
		if(gc == 0)
		{
			printf("Grand Child starting execution. PID: %d, sleeping 2 seconds.\n", getpid());
			sleep(2);
			printf("Grand Child exiting.\n");
			exit(55);
		}
		int status;
            pid_t child_pid;

            child_pid = wait(&status);
            if (WIFEXITED(status))
            {
                printf("Parent of Grand Child: Child with PID %d exited with status %d\n", child_pid, WEXITSTATUS(status));
            }
		
    }
    else
    {

            int status;
            pid_t child_pid;

            child_pid = wait(&status);
            if (WIFEXITED(status))
            {
                printf("Parent: Child with PID %d exited with status %d\n", child_pid, WEXITSTATUS(status));
            }

            child_pid = wait(&status);
            if (WIFEXITED(status))
            {
                printf("Parent: Child with PID %d exited with status %d\n", child_pid, WEXITSTATUS(status));
            }

            printf("Parent process ending.\n");
        
    }

    return 0;
}

Parent starting execution. PID: 1101
Grand Child starting execution. PID: 1103, sleeping 2 seconds.
Child process started.
Grand Child exiting.
Parent of Grand Child: Child with PID 1103 exited with status 2
Parent: Child with PID 1102 exited with status 55
Parent process ending.
